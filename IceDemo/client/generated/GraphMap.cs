// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `GraphMap.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace IceCompactId
{
}

namespace Demo
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface GraphMap : Ice.Object, GraphMapOperations_
    {
    }
}

namespace Demo
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public delegate void Callback_GraphMap_GetAllNodes(global::Demo.MyNode[] ret);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public delegate void Callback_GraphMap_GetAllMaps(global::Demo.MyGraph[] ret);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public delegate void Callback_GraphMap_CreateGraph(bool ret);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public delegate void Callback_GraphMap_EditGraph(bool ret);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public delegate void Callback_GraphMap_DeleteGraph(bool ret);
}

namespace Demo
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public interface GraphMapPrx : Ice.ObjectPrx
    {
        global::Demo.MyNode[] GetAllNodes(string graphName, Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task<global::Demo.MyNode[]> GetAllNodesAsync(string graphName, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<Demo.Callback_GraphMap_GetAllNodes> begin_GetAllNodes(string graphName, Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_GetAllNodes(string graphName, Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_GetAllNodes(string graphName, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        global::Demo.MyNode[] end_GetAllNodes(Ice.AsyncResult asyncResult);

        global::Demo.MyGraph[] GetAllMaps(Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task<global::Demo.MyGraph[]> GetAllMapsAsync(Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<Demo.Callback_GraphMap_GetAllMaps> begin_GetAllMaps(Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_GetAllMaps(Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_GetAllMaps(Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        global::Demo.MyGraph[] end_GetAllMaps(Ice.AsyncResult asyncResult);

        bool CreateGraph(string graphName, Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task<bool> CreateGraphAsync(string graphName, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<Demo.Callback_GraphMap_CreateGraph> begin_CreateGraph(string graphName, Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_CreateGraph(string graphName, Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_CreateGraph(string graphName, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        bool end_CreateGraph(Ice.AsyncResult asyncResult);

        bool EditGraph(string graphName, string newGraphName, Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task<bool> EditGraphAsync(string graphName, string newGraphName, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<Demo.Callback_GraphMap_EditGraph> begin_EditGraph(string graphName, string newGraphName, Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_EditGraph(string graphName, string newGraphName, Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_EditGraph(string graphName, string newGraphName, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        bool end_EditGraph(Ice.AsyncResult asyncResult);

        bool DeleteGraph(string graphName, Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task<bool> DeleteGraphAsync(string graphName, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<Demo.Callback_GraphMap_DeleteGraph> begin_DeleteGraph(string graphName, Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_DeleteGraph(string graphName, Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_DeleteGraph(string graphName, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        bool end_DeleteGraph(Ice.AsyncResult asyncResult);
    }
}

namespace Demo
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public interface GraphMapOperations_
    {
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        global::Demo.MyNode[] GetAllNodes(string graphName, Ice.Current current = null);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        global::Demo.MyGraph[] GetAllMaps(Ice.Current current = null);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        bool CreateGraph(string graphName, Ice.Current current = null);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        bool EditGraph(string graphName, string newGraphName, Ice.Current current = null);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        bool DeleteGraph(string graphName, Ice.Current current = null);
    }
}

namespace Demo
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public sealed class GraphHelper
    {
        public static void write(Ice.OutputStream ostr, global::Demo.MyGraph v)
        {
            ostr.writeSerializable(v);
        }

        public static global::Demo.MyGraph read(Ice.InputStream istr)
        {
            global::Demo.MyGraph v;
            v = (global::Demo.MyGraph)istr.readSerializable();
            return v;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public sealed class GraphSeqHelper
    {
        public static void write(Ice.OutputStream ostr, global::Demo.MyGraph[] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    Demo.GraphHelper.write(ostr, v[ix]);
                }
            }
        }

        public static global::Demo.MyGraph[] read(Ice.InputStream istr)
        {
            global::Demo.MyGraph[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new global::Demo.MyGraph[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = Demo.GraphHelper.read(istr);
                }
            }
            return v;
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    [_System.Serializable]
    public sealed class GraphMapPrxHelper : Ice.ObjectPrxHelperBase, GraphMapPrx
    {
        public GraphMapPrxHelper()
        {
        }

        public GraphMapPrxHelper(_System.Runtime.Serialization.SerializationInfo info, _System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public bool CreateGraph(string graphName, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                return _iceI_CreateGraphAsync(graphName, context, null, _System.Threading.CancellationToken.None, true).Result;
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool DeleteGraph(string graphName, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                return _iceI_DeleteGraphAsync(graphName, context, null, _System.Threading.CancellationToken.None, true).Result;
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool EditGraph(string graphName, string newGraphName, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                return _iceI_EditGraphAsync(graphName, newGraphName, context, null, _System.Threading.CancellationToken.None, true).Result;
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::Demo.MyGraph[] GetAllMaps(Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                return _iceI_GetAllMapsAsync(context, null, _System.Threading.CancellationToken.None, true).Result;
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::Demo.MyNode[] GetAllNodes(string graphName, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                return _iceI_GetAllNodesAsync(graphName, context, null, _System.Threading.CancellationToken.None, true).Result;
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public _System.Threading.Tasks.Task<bool> CreateGraphAsync(string graphName, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_CreateGraphAsync(graphName, context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task<bool> _iceI_CreateGraphAsync(string iceP_graphName, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_CreateGraph_name);
            var completed = new IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_CreateGraph(iceP_graphName, context, synchronous, completed);
            return completed.Task;
        }

        private const string _CreateGraph_name = "CreateGraph";

        private void _iceI_CreateGraph(string iceP_graphName, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _CreateGraph_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_graphName);
                },
                read: (Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        public _System.Threading.Tasks.Task<bool> DeleteGraphAsync(string graphName, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_DeleteGraphAsync(graphName, context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task<bool> _iceI_DeleteGraphAsync(string iceP_graphName, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_DeleteGraph_name);
            var completed = new IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_DeleteGraph(iceP_graphName, context, synchronous, completed);
            return completed.Task;
        }

        private const string _DeleteGraph_name = "DeleteGraph";

        private void _iceI_DeleteGraph(string iceP_graphName, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _DeleteGraph_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_graphName);
                },
                read: (Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        public _System.Threading.Tasks.Task<bool> EditGraphAsync(string graphName, string newGraphName, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_EditGraphAsync(graphName, newGraphName, context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task<bool> _iceI_EditGraphAsync(string iceP_graphName, string iceP_newGraphName, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_EditGraph_name);
            var completed = new IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_EditGraph(iceP_graphName, iceP_newGraphName, context, synchronous, completed);
            return completed.Task;
        }

        private const string _EditGraph_name = "EditGraph";

        private void _iceI_EditGraph(string iceP_graphName, string iceP_newGraphName, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _EditGraph_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_graphName);
                    ostr.writeString(iceP_newGraphName);
                },
                read: (Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        public _System.Threading.Tasks.Task<global::Demo.MyGraph[]> GetAllMapsAsync(Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_GetAllMapsAsync(context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task<global::Demo.MyGraph[]> _iceI_GetAllMapsAsync(Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_GetAllMaps_name);
            var completed = new IceInternal.OperationTaskCompletionCallback<global::Demo.MyGraph[]>(progress, cancel);
            _iceI_GetAllMaps(context, synchronous, completed);
            return completed.Task;
        }

        private const string _GetAllMaps_name = "GetAllMaps";

        private void _iceI_GetAllMaps(_System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Demo.MyGraph[]>(completed);
            outAsync.invoke(
                _GetAllMaps_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    global::Demo.MyGraph[] ret;
                    ret = Demo.GraphSeqHelper.read(istr);
                    return ret;
                });
        }

        public _System.Threading.Tasks.Task<global::Demo.MyNode[]> GetAllNodesAsync(string graphName, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_GetAllNodesAsync(graphName, context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task<global::Demo.MyNode[]> _iceI_GetAllNodesAsync(string iceP_graphName, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_GetAllNodes_name);
            var completed = new IceInternal.OperationTaskCompletionCallback<global::Demo.MyNode[]>(progress, cancel);
            _iceI_GetAllNodes(iceP_graphName, context, synchronous, completed);
            return completed.Task;
        }

        private const string _GetAllNodes_name = "GetAllNodes";

        private void _iceI_GetAllNodes(string iceP_graphName, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Demo.MyNode[]>(completed);
            outAsync.invoke(
                _GetAllNodes_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_graphName);
                },
                read: (Ice.InputStream istr) =>
                {
                    global::Demo.MyNode[] ret;
                    ret = Demo.NodeSeqHelper.read(istr);
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<Demo.Callback_GraphMap_CreateGraph> begin_CreateGraph(string graphName, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_CreateGraph(graphName, context, null, null, false);
        }

        public Ice.AsyncResult begin_CreateGraph(string graphName, Ice.AsyncCallback callback, object cookie)
        {
            return begin_CreateGraph(graphName, new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_CreateGraph(string graphName, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_CreateGraph(graphName, context, callback, cookie, false);
        }

        public bool end_CreateGraph(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _CreateGraph_name);
            var outgoing_ = (IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private Ice.AsyncResult<Demo.Callback_GraphMap_CreateGraph> begin_CreateGraph(string iceP_graphName, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_CreateGraph_name);
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<Demo.Callback_GraphMap_CreateGraph, bool>(
                (Demo.Callback_GraphMap_CreateGraph cb, bool ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _CreateGraph_name, cookie, completedCallback);
            _iceI_CreateGraph(iceP_graphName, context, synchronous, completed);
            return completed;
        }

        public Ice.AsyncResult<Demo.Callback_GraphMap_DeleteGraph> begin_DeleteGraph(string graphName, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_DeleteGraph(graphName, context, null, null, false);
        }

        public Ice.AsyncResult begin_DeleteGraph(string graphName, Ice.AsyncCallback callback, object cookie)
        {
            return begin_DeleteGraph(graphName, new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_DeleteGraph(string graphName, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_DeleteGraph(graphName, context, callback, cookie, false);
        }

        public bool end_DeleteGraph(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _DeleteGraph_name);
            var outgoing_ = (IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private Ice.AsyncResult<Demo.Callback_GraphMap_DeleteGraph> begin_DeleteGraph(string iceP_graphName, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_DeleteGraph_name);
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<Demo.Callback_GraphMap_DeleteGraph, bool>(
                (Demo.Callback_GraphMap_DeleteGraph cb, bool ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _DeleteGraph_name, cookie, completedCallback);
            _iceI_DeleteGraph(iceP_graphName, context, synchronous, completed);
            return completed;
        }

        public Ice.AsyncResult<Demo.Callback_GraphMap_EditGraph> begin_EditGraph(string graphName, string newGraphName, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_EditGraph(graphName, newGraphName, context, null, null, false);
        }

        public Ice.AsyncResult begin_EditGraph(string graphName, string newGraphName, Ice.AsyncCallback callback, object cookie)
        {
            return begin_EditGraph(graphName, newGraphName, new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_EditGraph(string graphName, string newGraphName, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_EditGraph(graphName, newGraphName, context, callback, cookie, false);
        }

        public bool end_EditGraph(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _EditGraph_name);
            var outgoing_ = (IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private Ice.AsyncResult<Demo.Callback_GraphMap_EditGraph> begin_EditGraph(string iceP_graphName, string iceP_newGraphName, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_EditGraph_name);
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<Demo.Callback_GraphMap_EditGraph, bool>(
                (Demo.Callback_GraphMap_EditGraph cb, bool ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _EditGraph_name, cookie, completedCallback);
            _iceI_EditGraph(iceP_graphName, iceP_newGraphName, context, synchronous, completed);
            return completed;
        }

        public Ice.AsyncResult<Demo.Callback_GraphMap_GetAllMaps> begin_GetAllMaps(Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_GetAllMaps(context, null, null, false);
        }

        public Ice.AsyncResult begin_GetAllMaps(Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetAllMaps(new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_GetAllMaps(Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetAllMaps(context, callback, cookie, false);
        }

        public global::Demo.MyGraph[] end_GetAllMaps(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _GetAllMaps_name);
            var outgoing_ = (IceInternal.OutgoingAsyncT<global::Demo.MyGraph[]>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private Ice.AsyncResult<Demo.Callback_GraphMap_GetAllMaps> begin_GetAllMaps(_System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_GetAllMaps_name);
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<Demo.Callback_GraphMap_GetAllMaps, global::Demo.MyGraph[]>(
                (Demo.Callback_GraphMap_GetAllMaps cb, global::Demo.MyGraph[] ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _GetAllMaps_name, cookie, completedCallback);
            _iceI_GetAllMaps(context, synchronous, completed);
            return completed;
        }

        public Ice.AsyncResult<Demo.Callback_GraphMap_GetAllNodes> begin_GetAllNodes(string graphName, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_GetAllNodes(graphName, context, null, null, false);
        }

        public Ice.AsyncResult begin_GetAllNodes(string graphName, Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetAllNodes(graphName, new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_GetAllNodes(string graphName, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetAllNodes(graphName, context, callback, cookie, false);
        }

        public global::Demo.MyNode[] end_GetAllNodes(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _GetAllNodes_name);
            var outgoing_ = (IceInternal.OutgoingAsyncT<global::Demo.MyNode[]>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private Ice.AsyncResult<Demo.Callback_GraphMap_GetAllNodes> begin_GetAllNodes(string iceP_graphName, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_GetAllNodes_name);
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<Demo.Callback_GraphMap_GetAllNodes, global::Demo.MyNode[]>(
                (Demo.Callback_GraphMap_GetAllNodes cb, global::Demo.MyNode[] ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _GetAllNodes_name, cookie, completedCallback);
            _iceI_GetAllNodes(iceP_graphName, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static GraphMapPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            GraphMapPrx r = b as GraphMapPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                GraphMapPrxHelper h = new GraphMapPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static GraphMapPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            GraphMapPrx r = b as GraphMapPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                GraphMapPrxHelper h = new GraphMapPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static GraphMapPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    GraphMapPrxHelper h = new GraphMapPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static GraphMapPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    GraphMapPrxHelper h = new GraphMapPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static GraphMapPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            GraphMapPrx r = b as GraphMapPrx;
            if(r == null)
            {
                GraphMapPrxHelper h = new GraphMapPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static GraphMapPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            GraphMapPrxHelper h = new GraphMapPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Demo::GraphMap",
            "::Ice::Object"
        };

        public static string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Marshaling support

        public static void write(Ice.OutputStream ostr, GraphMapPrx v)
        {
            ostr.writeProxy(v);
        }

        public static GraphMapPrx read(Ice.InputStream istr)
        {
            Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                GraphMapPrxHelper result = new GraphMapPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace Demo
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public abstract class GraphMapDisp_ : Ice.ObjectImpl, GraphMap
    {
        #region Slice operations

        public abstract global::Demo.MyNode[] GetAllNodes(string graphName, Ice.Current current = null);

        public abstract global::Demo.MyGraph[] GetAllMaps(Ice.Current current = null);

        public abstract bool CreateGraph(string graphName, Ice.Current current = null);

        public abstract bool EditGraph(string graphName, string newGraphName, Ice.Current current = null);

        public abstract bool DeleteGraph(string graphName, Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Demo::GraphMap",
            "::Ice::Object"
        };

        public override bool ice_isA(string s, Ice.Current current = null)
        {
            return _System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(Ice.Current current = null)
        {
            return _ids[0];
        }

        public static new string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_GetAllNodes(GraphMap obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_graphName;
            iceP_graphName = istr.readString();
            inS.endReadParams();
            var ret = obj.GetAllNodes(iceP_graphName, current);
            var ostr = inS.startWriteParams();
            Demo.NodeSeqHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_GetAllMaps(GraphMap obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.GetAllMaps(current);
            var ostr = inS.startWriteParams();
            Demo.GraphSeqHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_CreateGraph(GraphMap obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_graphName;
            iceP_graphName = istr.readString();
            inS.endReadParams();
            var ret = obj.CreateGraph(iceP_graphName, current);
            var ostr = inS.startWriteParams();
            ostr.writeBool(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_EditGraph(GraphMap obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_graphName;
            string iceP_newGraphName;
            iceP_graphName = istr.readString();
            iceP_newGraphName = istr.readString();
            inS.endReadParams();
            var ret = obj.EditGraph(iceP_graphName, iceP_newGraphName, current);
            var ostr = inS.startWriteParams();
            ostr.writeBool(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_DeleteGraph(GraphMap obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_graphName;
            iceP_graphName = istr.readString();
            inS.endReadParams();
            var ret = obj.DeleteGraph(iceP_graphName, current);
            var ostr = inS.startWriteParams();
            ostr.writeBool(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "CreateGraph",
            "DeleteGraph",
            "EditGraph",
            "GetAllMaps",
            "GetAllNodes",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override _System.Threading.Tasks.Task<Ice.OutputStream>
        iceDispatch(IceInternal.Incoming inS, Ice.Current current)
        {
            int pos = _System.Array.BinarySearch(_all, current.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_CreateGraph(this, inS, current);
                }
                case 1:
                {
                    return iceD_DeleteGraph(this, inS, current);
                }
                case 2:
                {
                    return iceD_EditGraph(this, inS, current);
                }
                case 3:
                {
                    return iceD_GetAllMaps(this, inS, current);
                }
                case 4:
                {
                    return iceD_GetAllNodes(this, inS, current);
                }
                case 5:
                {
                    return Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 6:
                {
                    return Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 7:
                {
                    return Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 8:
                {
                    return Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
