// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `UserMap.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace IceCompactId
{
}

namespace Demo
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface UserCallBack : Ice.Object, UserCallBackOperations_
    {
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface UserMap : Ice.Object, UserMapOperations_
    {
    }
}

namespace Demo
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public delegate void Callback_UserCallBack_Response();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public delegate void Callback_UserCallBack_ResponseNode();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public delegate void Callback_UserCallBack_ResponseGraph();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public delegate void Callback_UserMap_SendGreeting();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public delegate void Callback_UserMap_SetupCallback();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public delegate void Callback_UserMap_Register(bool ret);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public delegate void Callback_UserMap_Unregister();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public delegate void Callback_UserMap_shutdown();
}

namespace Demo
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public interface UserCallBackPrx : Ice.ObjectPrx
    {
        void Response(string content, Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task ResponseAsync(string content, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<Demo.Callback_UserCallBack_Response> begin_Response(string content, Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_Response(string content, Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_Response(string content, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        void end_Response(Ice.AsyncResult asyncResult);

        void ResponseNode(string content, global::Demo.MyNode node, Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task ResponseNodeAsync(string content, global::Demo.MyNode node, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<Demo.Callback_UserCallBack_ResponseNode> begin_ResponseNode(string content, global::Demo.MyNode node, Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_ResponseNode(string content, global::Demo.MyNode node, Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_ResponseNode(string content, global::Demo.MyNode node, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        void end_ResponseNode(Ice.AsyncResult asyncResult);

        void ResponseGraph(string content, string graph, Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task ResponseGraphAsync(string content, string graph, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<Demo.Callback_UserCallBack_ResponseGraph> begin_ResponseGraph(string content, string graph, Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_ResponseGraph(string content, string graph, Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_ResponseGraph(string content, string graph, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        void end_ResponseGraph(Ice.AsyncResult asyncResult);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public interface UserMapPrx : Ice.ObjectPrx
    {
        void SendGreeting(string msg, Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task SendGreetingAsync(string msg, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<Demo.Callback_UserMap_SendGreeting> begin_SendGreeting(string msg, Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_SendGreeting(string msg, Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_SendGreeting(string msg, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        void end_SendGreeting(Ice.AsyncResult asyncResult);

        void SetupCallback(Demo.UserCallBackPrx cp, Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task SetupCallbackAsync(Demo.UserCallBackPrx cp, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<Demo.Callback_UserMap_SetupCallback> begin_SetupCallback(Demo.UserCallBackPrx cp, Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_SetupCallback(Demo.UserCallBackPrx cp, Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_SetupCallback(Demo.UserCallBackPrx cp, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        void end_SetupCallback(Ice.AsyncResult asyncResult);

        bool Register(string name, Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task<bool> RegisterAsync(string name, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<Demo.Callback_UserMap_Register> begin_Register(string name, Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_Register(string name, Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_Register(string name, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        bool end_Register(Ice.AsyncResult asyncResult);

        void Unregister(Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task UnregisterAsync(Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<Demo.Callback_UserMap_Unregister> begin_Unregister(Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_Unregister(Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_Unregister(Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        void end_Unregister(Ice.AsyncResult asyncResult);

        void shutdown(Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task shutdownAsync(Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<Demo.Callback_UserMap_shutdown> begin_shutdown(Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_shutdown(Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_shutdown(Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        void end_shutdown(Ice.AsyncResult asyncResult);
    }
}

namespace Demo
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public interface UserCallBackOperations_
    {
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        void Response(string content, Ice.Current current = null);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        void ResponseNode(string content, global::Demo.MyNode node, Ice.Current current = null);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        void ResponseGraph(string content, string graph, Ice.Current current = null);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public interface UserMapOperations_
    {
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        void SendGreeting(string msg, Ice.Current current = null);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        void SetupCallback(Demo.UserCallBackPrx cp, Ice.Current current = null);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        bool Register(string name, Ice.Current current = null);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        void Unregister(Ice.Current current = null);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        void shutdown(Ice.Current current = null);
    }
}

namespace Demo
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    [_System.Serializable]
    public sealed class UserCallBackPrxHelper : Ice.ObjectPrxHelperBase, UserCallBackPrx
    {
        public UserCallBackPrxHelper()
        {
        }

        public UserCallBackPrxHelper(_System.Runtime.Serialization.SerializationInfo info, _System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public void Response(string content, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                _iceI_ResponseAsync(content, context, null, _System.Threading.CancellationToken.None, true).Wait();
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void ResponseGraph(string content, string graph, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                _iceI_ResponseGraphAsync(content, graph, context, null, _System.Threading.CancellationToken.None, true).Wait();
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void ResponseNode(string content, global::Demo.MyNode node, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                _iceI_ResponseNodeAsync(content, node, context, null, _System.Threading.CancellationToken.None, true).Wait();
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public _System.Threading.Tasks.Task ResponseAsync(string content, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_ResponseAsync(content, context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task _iceI_ResponseAsync(string iceP_content, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_Response(iceP_content, context, synchronous, completed);
            return completed.Task;
        }

        private const string _Response_name = "Response";

        private void _iceI_Response(string iceP_content, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _Response_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_content);
                });
        }

        public _System.Threading.Tasks.Task ResponseGraphAsync(string content, string graph, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_ResponseGraphAsync(content, graph, context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task _iceI_ResponseGraphAsync(string iceP_content, string iceP_graph, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_ResponseGraph(iceP_content, iceP_graph, context, synchronous, completed);
            return completed.Task;
        }

        private const string _ResponseGraph_name = "ResponseGraph";

        private void _iceI_ResponseGraph(string iceP_content, string iceP_graph, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _ResponseGraph_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_content);
                    ostr.writeString(iceP_graph);
                });
        }

        public _System.Threading.Tasks.Task ResponseNodeAsync(string content, global::Demo.MyNode node, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_ResponseNodeAsync(content, node, context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task _iceI_ResponseNodeAsync(string iceP_content, global::Demo.MyNode iceP_node, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_ResponseNode(iceP_content, iceP_node, context, synchronous, completed);
            return completed.Task;
        }

        private const string _ResponseNode_name = "ResponseNode";

        private void _iceI_ResponseNode(string iceP_content, global::Demo.MyNode iceP_node, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _ResponseNode_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_content);
                    Demo.NodeHelper.write(ostr, iceP_node);
                });
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<Demo.Callback_UserCallBack_Response> begin_Response(string content, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_Response(content, context, null, null, false);
        }

        public Ice.AsyncResult begin_Response(string content, Ice.AsyncCallback callback, object cookie)
        {
            return begin_Response(content, new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_Response(string content, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_Response(content, context, callback, cookie, false);
        }

        public void end_Response(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _Response_name);
            ((IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private Ice.AsyncResult<Demo.Callback_UserCallBack_Response> begin_Response(string iceP_content, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<Demo.Callback_UserCallBack_Response, object>(
                (Demo.Callback_UserCallBack_Response cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _Response_name, cookie, completedCallback);
            _iceI_Response(iceP_content, context, synchronous, completed);
            return completed;
        }

        public Ice.AsyncResult<Demo.Callback_UserCallBack_ResponseGraph> begin_ResponseGraph(string content, string graph, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_ResponseGraph(content, graph, context, null, null, false);
        }

        public Ice.AsyncResult begin_ResponseGraph(string content, string graph, Ice.AsyncCallback callback, object cookie)
        {
            return begin_ResponseGraph(content, graph, new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_ResponseGraph(string content, string graph, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_ResponseGraph(content, graph, context, callback, cookie, false);
        }

        public void end_ResponseGraph(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _ResponseGraph_name);
            ((IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private Ice.AsyncResult<Demo.Callback_UserCallBack_ResponseGraph> begin_ResponseGraph(string iceP_content, string iceP_graph, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<Demo.Callback_UserCallBack_ResponseGraph, object>(
                (Demo.Callback_UserCallBack_ResponseGraph cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _ResponseGraph_name, cookie, completedCallback);
            _iceI_ResponseGraph(iceP_content, iceP_graph, context, synchronous, completed);
            return completed;
        }

        public Ice.AsyncResult<Demo.Callback_UserCallBack_ResponseNode> begin_ResponseNode(string content, global::Demo.MyNode node, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_ResponseNode(content, node, context, null, null, false);
        }

        public Ice.AsyncResult begin_ResponseNode(string content, global::Demo.MyNode node, Ice.AsyncCallback callback, object cookie)
        {
            return begin_ResponseNode(content, node, new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_ResponseNode(string content, global::Demo.MyNode node, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_ResponseNode(content, node, context, callback, cookie, false);
        }

        public void end_ResponseNode(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _ResponseNode_name);
            ((IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private Ice.AsyncResult<Demo.Callback_UserCallBack_ResponseNode> begin_ResponseNode(string iceP_content, global::Demo.MyNode iceP_node, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<Demo.Callback_UserCallBack_ResponseNode, object>(
                (Demo.Callback_UserCallBack_ResponseNode cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _ResponseNode_name, cookie, completedCallback);
            _iceI_ResponseNode(iceP_content, iceP_node, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static UserCallBackPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            UserCallBackPrx r = b as UserCallBackPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                UserCallBackPrxHelper h = new UserCallBackPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static UserCallBackPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            UserCallBackPrx r = b as UserCallBackPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                UserCallBackPrxHelper h = new UserCallBackPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static UserCallBackPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    UserCallBackPrxHelper h = new UserCallBackPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static UserCallBackPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    UserCallBackPrxHelper h = new UserCallBackPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static UserCallBackPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            UserCallBackPrx r = b as UserCallBackPrx;
            if(r == null)
            {
                UserCallBackPrxHelper h = new UserCallBackPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static UserCallBackPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            UserCallBackPrxHelper h = new UserCallBackPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Demo::UserCallBack",
            "::Ice::Object"
        };

        public static string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Marshaling support

        public static void write(Ice.OutputStream ostr, UserCallBackPrx v)
        {
            ostr.writeProxy(v);
        }

        public static UserCallBackPrx read(Ice.InputStream istr)
        {
            Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                UserCallBackPrxHelper result = new UserCallBackPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    [_System.Serializable]
    public sealed class UserMapPrxHelper : Ice.ObjectPrxHelperBase, UserMapPrx
    {
        public UserMapPrxHelper()
        {
        }

        public UserMapPrxHelper(_System.Runtime.Serialization.SerializationInfo info, _System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public bool Register(string name, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                return _iceI_RegisterAsync(name, context, null, _System.Threading.CancellationToken.None, true).Result;
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void SendGreeting(string msg, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                _iceI_SendGreetingAsync(msg, context, null, _System.Threading.CancellationToken.None, true).Wait();
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void SetupCallback(Demo.UserCallBackPrx cp, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                _iceI_SetupCallbackAsync(cp, context, null, _System.Threading.CancellationToken.None, true).Wait();
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void Unregister(Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                _iceI_UnregisterAsync(context, null, _System.Threading.CancellationToken.None, true).Wait();
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void shutdown(Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                _iceI_shutdownAsync(context, null, _System.Threading.CancellationToken.None, true).Wait();
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public _System.Threading.Tasks.Task<bool> RegisterAsync(string name, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_RegisterAsync(name, context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task<bool> _iceI_RegisterAsync(string iceP_name, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_Register_name);
            var completed = new IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_Register(iceP_name, context, synchronous, completed);
            return completed.Task;
        }

        private const string _Register_name = "Register";

        private void _iceI_Register(string iceP_name, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _Register_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_name);
                },
                read: (Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        public _System.Threading.Tasks.Task SendGreetingAsync(string msg, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_SendGreetingAsync(msg, context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task _iceI_SendGreetingAsync(string iceP_msg, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_SendGreeting(iceP_msg, context, synchronous, completed);
            return completed.Task;
        }

        private const string _SendGreeting_name = "SendGreeting";

        private void _iceI_SendGreeting(string iceP_msg, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _SendGreeting_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_msg);
                });
        }

        public _System.Threading.Tasks.Task SetupCallbackAsync(Demo.UserCallBackPrx cp, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_SetupCallbackAsync(cp, context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task _iceI_SetupCallbackAsync(Demo.UserCallBackPrx iceP_cp, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_SetupCallback(iceP_cp, context, synchronous, completed);
            return completed.Task;
        }

        private const string _SetupCallback_name = "SetupCallback";

        private void _iceI_SetupCallback(Demo.UserCallBackPrx iceP_cp, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _SetupCallback_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    Demo.UserCallBackPrxHelper.write(ostr, iceP_cp);
                });
        }

        public _System.Threading.Tasks.Task UnregisterAsync(Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_UnregisterAsync(context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task _iceI_UnregisterAsync(Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_Unregister(context, synchronous, completed);
            return completed.Task;
        }

        private const string _Unregister_name = "Unregister";

        private void _iceI_Unregister(_System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _Unregister_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public _System.Threading.Tasks.Task shutdownAsync(Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_shutdownAsync(context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task _iceI_shutdownAsync(Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_shutdown(context, synchronous, completed);
            return completed.Task;
        }

        private const string _shutdown_name = "shutdown";

        private void _iceI_shutdown(_System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _shutdown_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<Demo.Callback_UserMap_Register> begin_Register(string name, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_Register(name, context, null, null, false);
        }

        public Ice.AsyncResult begin_Register(string name, Ice.AsyncCallback callback, object cookie)
        {
            return begin_Register(name, new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_Register(string name, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_Register(name, context, callback, cookie, false);
        }

        public bool end_Register(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _Register_name);
            var outgoing_ = (IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private Ice.AsyncResult<Demo.Callback_UserMap_Register> begin_Register(string iceP_name, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_Register_name);
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<Demo.Callback_UserMap_Register, bool>(
                (Demo.Callback_UserMap_Register cb, bool ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _Register_name, cookie, completedCallback);
            _iceI_Register(iceP_name, context, synchronous, completed);
            return completed;
        }

        public Ice.AsyncResult<Demo.Callback_UserMap_SendGreeting> begin_SendGreeting(string msg, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_SendGreeting(msg, context, null, null, false);
        }

        public Ice.AsyncResult begin_SendGreeting(string msg, Ice.AsyncCallback callback, object cookie)
        {
            return begin_SendGreeting(msg, new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_SendGreeting(string msg, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_SendGreeting(msg, context, callback, cookie, false);
        }

        public void end_SendGreeting(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _SendGreeting_name);
            ((IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private Ice.AsyncResult<Demo.Callback_UserMap_SendGreeting> begin_SendGreeting(string iceP_msg, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<Demo.Callback_UserMap_SendGreeting, object>(
                (Demo.Callback_UserMap_SendGreeting cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _SendGreeting_name, cookie, completedCallback);
            _iceI_SendGreeting(iceP_msg, context, synchronous, completed);
            return completed;
        }

        public Ice.AsyncResult<Demo.Callback_UserMap_SetupCallback> begin_SetupCallback(Demo.UserCallBackPrx cp, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_SetupCallback(cp, context, null, null, false);
        }

        public Ice.AsyncResult begin_SetupCallback(Demo.UserCallBackPrx cp, Ice.AsyncCallback callback, object cookie)
        {
            return begin_SetupCallback(cp, new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_SetupCallback(Demo.UserCallBackPrx cp, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_SetupCallback(cp, context, callback, cookie, false);
        }

        public void end_SetupCallback(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _SetupCallback_name);
            ((IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private Ice.AsyncResult<Demo.Callback_UserMap_SetupCallback> begin_SetupCallback(Demo.UserCallBackPrx iceP_cp, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<Demo.Callback_UserMap_SetupCallback, object>(
                (Demo.Callback_UserMap_SetupCallback cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _SetupCallback_name, cookie, completedCallback);
            _iceI_SetupCallback(iceP_cp, context, synchronous, completed);
            return completed;
        }

        public Ice.AsyncResult<Demo.Callback_UserMap_Unregister> begin_Unregister(Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_Unregister(context, null, null, false);
        }

        public Ice.AsyncResult begin_Unregister(Ice.AsyncCallback callback, object cookie)
        {
            return begin_Unregister(new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_Unregister(Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_Unregister(context, callback, cookie, false);
        }

        public void end_Unregister(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _Unregister_name);
            ((IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private Ice.AsyncResult<Demo.Callback_UserMap_Unregister> begin_Unregister(_System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<Demo.Callback_UserMap_Unregister, object>(
                (Demo.Callback_UserMap_Unregister cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _Unregister_name, cookie, completedCallback);
            _iceI_Unregister(context, synchronous, completed);
            return completed;
        }

        public Ice.AsyncResult<Demo.Callback_UserMap_shutdown> begin_shutdown(Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_shutdown(context, null, null, false);
        }

        public Ice.AsyncResult begin_shutdown(Ice.AsyncCallback callback, object cookie)
        {
            return begin_shutdown(new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_shutdown(Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_shutdown(context, callback, cookie, false);
        }

        public void end_shutdown(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _shutdown_name);
            ((IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private Ice.AsyncResult<Demo.Callback_UserMap_shutdown> begin_shutdown(_System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<Demo.Callback_UserMap_shutdown, object>(
                (Demo.Callback_UserMap_shutdown cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _shutdown_name, cookie, completedCallback);
            _iceI_shutdown(context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static UserMapPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            UserMapPrx r = b as UserMapPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                UserMapPrxHelper h = new UserMapPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static UserMapPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            UserMapPrx r = b as UserMapPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                UserMapPrxHelper h = new UserMapPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static UserMapPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    UserMapPrxHelper h = new UserMapPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static UserMapPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    UserMapPrxHelper h = new UserMapPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static UserMapPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            UserMapPrx r = b as UserMapPrx;
            if(r == null)
            {
                UserMapPrxHelper h = new UserMapPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static UserMapPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            UserMapPrxHelper h = new UserMapPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Demo::UserMap",
            "::Ice::Object"
        };

        public static string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Marshaling support

        public static void write(Ice.OutputStream ostr, UserMapPrx v)
        {
            ostr.writeProxy(v);
        }

        public static UserMapPrx read(Ice.InputStream istr)
        {
            Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                UserMapPrxHelper result = new UserMapPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace Demo
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public abstract class UserCallBackDisp_ : Ice.ObjectImpl, UserCallBack
    {
        #region Slice operations

        public abstract void Response(string content, Ice.Current current = null);

        public abstract void ResponseNode(string content, global::Demo.MyNode node, Ice.Current current = null);

        public abstract void ResponseGraph(string content, string graph, Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Demo::UserCallBack",
            "::Ice::Object"
        };

        public override bool ice_isA(string s, Ice.Current current = null)
        {
            return _System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(Ice.Current current = null)
        {
            return _ids[0];
        }

        public static new string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_Response(UserCallBack obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_content;
            iceP_content = istr.readString();
            inS.endReadParams();
            obj.Response(iceP_content, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_ResponseNode(UserCallBack obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_content;
            global::Demo.MyNode iceP_node;
            iceP_content = istr.readString();
            iceP_node = Demo.NodeHelper.read(istr);
            inS.endReadParams();
            obj.ResponseNode(iceP_content, iceP_node, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_ResponseGraph(UserCallBack obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_content;
            string iceP_graph;
            iceP_content = istr.readString();
            iceP_graph = istr.readString();
            inS.endReadParams();
            obj.ResponseGraph(iceP_content, iceP_graph, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "Response",
            "ResponseGraph",
            "ResponseNode",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override _System.Threading.Tasks.Task<Ice.OutputStream>
        iceDispatch(IceInternal.Incoming inS, Ice.Current current)
        {
            int pos = _System.Array.BinarySearch(_all, current.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_Response(this, inS, current);
                }
                case 1:
                {
                    return iceD_ResponseGraph(this, inS, current);
                }
                case 2:
                {
                    return iceD_ResponseNode(this, inS, current);
                }
                case 3:
                {
                    return Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 4:
                {
                    return Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 5:
                {
                    return Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 6:
                {
                    return Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public abstract class UserMapDisp_ : Ice.ObjectImpl, UserMap
    {
        #region Slice operations

        public abstract void SendGreeting(string msg, Ice.Current current = null);

        public abstract void SetupCallback(Demo.UserCallBackPrx cp, Ice.Current current = null);

        public abstract bool Register(string name, Ice.Current current = null);

        public abstract void Unregister(Ice.Current current = null);

        public abstract void shutdown(Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Demo::UserMap",
            "::Ice::Object"
        };

        public override bool ice_isA(string s, Ice.Current current = null)
        {
            return _System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(Ice.Current current = null)
        {
            return _ids[0];
        }

        public static new string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_SendGreeting(UserMap obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_msg;
            iceP_msg = istr.readString();
            inS.endReadParams();
            obj.SendGreeting(iceP_msg, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_SetupCallback(UserMap obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            Demo.UserCallBackPrx iceP_cp;
            iceP_cp = Demo.UserCallBackPrxHelper.read(istr);
            inS.endReadParams();
            obj.SetupCallback(iceP_cp, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_Register(UserMap obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_name;
            iceP_name = istr.readString();
            inS.endReadParams();
            var ret = obj.Register(iceP_name, current);
            var ostr = inS.startWriteParams();
            ostr.writeBool(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_Unregister(UserMap obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.Unregister(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_shutdown(UserMap obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.shutdown(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "Register",
            "SendGreeting",
            "SetupCallback",
            "Unregister",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "shutdown"
        };

        public override _System.Threading.Tasks.Task<Ice.OutputStream>
        iceDispatch(IceInternal.Incoming inS, Ice.Current current)
        {
            int pos = _System.Array.BinarySearch(_all, current.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_Register(this, inS, current);
                }
                case 1:
                {
                    return iceD_SendGreeting(this, inS, current);
                }
                case 2:
                {
                    return iceD_SetupCallback(this, inS, current);
                }
                case 3:
                {
                    return iceD_Unregister(this, inS, current);
                }
                case 4:
                {
                    return Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 5:
                {
                    return Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 6:
                {
                    return Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 7:
                {
                    return Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 8:
                {
                    return iceD_shutdown(this, inS, current);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
